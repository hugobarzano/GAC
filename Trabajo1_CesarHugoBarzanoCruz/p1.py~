"""XML generator from file.json"""


__author__ = 'Hugo Barzano'
__date__ = '2017/2018'
__version__ = 'v1.0'
__credits__ = 'GAC'
__file__ = 'p1.py'

import json
import xmltodict
import sys
import os
import getopt

"""
with open('input_1.json', 'r') as f:
    jsonString = f.read()
 
print('JSON input (sample.json):')
print(jsonString)
 
xmlString = xmltodict.unparse(json.loads(jsonString), pretty=True)
 
print('\nXML output(output.xml):')
print(xmlString)
 
with open('output.xml', 'w') as f:
    f.write(xmlString)
"""

def readInput(input_file):
    with open(input_file, 'r') as f:
    	input_file_as_string = f.read()
    return input_file_as_string

def writeOutput(output_file,output_string):
    with open(output_file, 'w') as f:
    	f.write(output_string)

def parseInputJsonToXML(input_string):
    xmlString = xmltodict.unparse(json.loads(input_string), pretty=True)
    return xmlString

def parseInputXMLToJson(input_string):
	#o = xmltodict.parse('<e> <a>text</a> <a>text</a> </e>')
    	#print(json.dumps(o))
    jsonString = xmltodict.parse(input_string)
    return json.dumps(jsonString)


def usage():
    """Method to display software usage. """
    print """
Usage: python p1.py [options]

Options
-v, --version			Show the version of this script
-h, --help			Show this help.
-i <path>, --input <path>    	Input file
-o <path>, --output <path>     	Output file
-m <int>,  --mode <int>   	Generator Mode
-d,         --debug         	Debug Mode
"""

def version():
    """Function to display software version"""
    print "version 1.0"

def main(argv):
    """Main method to execute the generator.
                :param argv: value from 0 to n-1 to ident"""
    input_file=None
    output_file=None
    mode=None
    debug=False

    # process arguments
    try:
        opts, args = getopt.getopt(argv, "hvi:o:m:d", ["help", "version", "input=","output=","mode=","debug"])
    except getopt.GetoptError as err:
        print str(err)
        usage()
        sys.exit(2)
    for opt, arg in opts:
        if opt in ("-h", "--help"):
            usage()
            sys.exit()
        elif opt in ("-v", "--version"):
            version()
            sys.exit()
        elif opt in ("-i", "--input"):
            input_file = arg
        elif opt in ("-o","--output"):
            output_file=arg
        elif opt in ("-m","--mode"):
            mode=arg
        elif opt in ("-d", "--debug"):
            debug = True
            print "Debug: TRUE"
        else:
            usage()
            sys.exit()


    

    
    print "main"
    #o = xmltodict.parse('<e> <a>text</a> <a>text</a> </e>')
    #print(json.dumps(o)) # '{"e": {"a": ["text", "text"]}}'   
# writeOutput("out.json",parseInputXMLToJson(readInput(input_file)))    
    print writeOutput("out.json",parseInputJsonToXML(readInput(input_file)))



# --------------------------------------------------------------------------------------------------
# Main exec
# --------------------------------------------------------------------------------------------------

if __name__ == "__main__":
    if len(sys.argv) > 1:
        main(sys.argv[1:])
    else:
        usage()
        sys.exit()
